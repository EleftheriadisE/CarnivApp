package CarnivAPP.GUI;

import CarnivAPP.Basket;
import CarnivAPP.Inventory;
import CarnivAPP.Order;
import CarnivAPP.DataBase.DataBaseCursorHolder;
import CarnivAPP.DataBase.DataBaseUtils;
import CarnivAPP.Users.Administrator;
import CarnivAPP.Users.Client;
import CarnivAPP.Users.User;
import javafx.application.Platform;
import javafx.event.ActionEvent;
import javafx.event.Event;
import javafx.event.EventType;
import javafx.geometry.Insets;
import javafx.scene.Node;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Modality;
import javafx.stage.Stage;
import javafx.util.Pair;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.List;

import static CarnivAPP.GUI.SceneHolder.createAdminPaneScene;
import static CarnivAPP.GUI.SceneHolder.createClientPaneScene;

public class LoginButton extends ChangeableScene
{
    public static Button createLoginButton(final Stage primaryStage, final Connection connection, final User user, final Inventory shopInventory, final Basket clientBasket, final List<Order> userOrders, final List<User> userList)
    {
        final Button btn = new Button();
        btn.setText("Αποκτήστε Πρόσβαση Στο Κατάστημα");

        btn.setOnAction(mainEvent -> loginAction(primaryStage, connection, user, shopInventory, clientBasket, userOrders, userList));
        return btn;
    }

    private static void loginAction(final Stage primaryStage, final Connection connection, final User user, final Inventory shopInventory, final Basket clientBasket, final List<Order> userOrders, final List<User> userList)
    {
        final Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle("Είσοδος");
        alert.setHeaderText("Διάλογος Εισόδου");

        final Dialog<Pair<String, String>> dialog = new Dialog<>();
        dialog.setTitle("Είσοδος στο CarnivAPP");
        dialog.setContentText("Εισάγετε το Όνομα Χρήστη και τον Κωδικό Χρήστη: ");
        dialog.initModality(Modality.NONE);

        //Σετάρισμα του login button.
        final ButtonType loginButtonType = new ButtonType("Είσοδος", ButtonBar.ButtonData.OK_DONE);
        dialog.getDialogPane().getButtonTypes().addAll(loginButtonType, ButtonType.CANCEL);

        //Δημιουργία των απαραίτητων πεδίων.
        final GridPane grid = new GridPane();
        grid.setHgap(10);
        grid.setVgap(10);
        grid.setPadding(new Insets(20, 150, 10, 10));

        final TextField UserName = new TextField();
        UserName.setPromptText("π.χ. ceiduser");
        UserName.setId("Όνομα Χρήστη");

        final PasswordField UserPassword = new PasswordField();
        UserPassword.setPromptText("xxxx");
        UserPassword.setId("Κωδικός Χρήστη");

        grid.add(new Label("Όνομα Χρήστη: "), 0, 0);
        grid.add(UserName, 1, 0);
        grid.add(new Label("Κωδικός Χρήστη: "), 0, 1);
        grid.add(UserPassword, 1, 1);

        //Ενεργοποίηση ή απενεργοποίηση του login button ανάλογα με το αν έχει δοθεί username.
        final Node loginButton = dialog.getDialogPane().lookupButton(loginButtonType);
        loginButton.setDisable(true);

        //Επαλήθευση εγκυρότητας για τα στοιχεία.
        UserName.textProperty().addListener((observable, oldValue, newValue) -> loginButton.setDisable(newValue.trim().isEmpty()));

        dialog.getDialogPane().setContent(grid);

        Platform.runLater(() -> UserName.requestFocus());

        dialog.initModality(Modality.APPLICATION_MODAL);
        dialog.show();

        loginButton.addEventFilter(EventType.ROOT, e -> {
            try {
                userAuthentication(primaryStage, e, dialog, UserName.getText(), UserPassword.getText(), connection, user, shopInventory,
                        clientBasket, userOrders, userList);
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        });
    }

    private static void userAuthentication(final Stage primaryStage, final Event e, final Dialog dialog, final String UserName,
                                           final String UserPassword, final Connection connection, User user, final Inventory shopInventory,
                                           final Basket clientBasket, final List<Order> userOrders, final List<User> userList) throws SQLException {
        if (e.getEventType().equals(ActionEvent.ACTION)) {
            e.consume();
            if (isUserAllowed(UserName, UserPassword, connection)) {
                if (isUserAdmin(UserName, UserPassword, connection)) {
                    user = new Administrator(UserName, UserPassword);
                    changeScene(primaryStage, createAdminPaneScene(connection, shopInventory, userOrders, userList, user));
                } else {
                    user = new Client(UserName, UserPassword);
                    changeScene(primaryStage, createClientPaneScene(connection, shopInventory, userOrders, clientBasket, user));
                }
                dialog.close();
            } else {
                final ShakeTransition animation = new ShakeTransition(dialog.getDialogPane(), t -> dialog.show());
                animation.playFromStart();
            }
        }
    }

    private static boolean isUserAllowed(final String UserName, final String UserPassword, final Connection connection) throws SQLException {
        final DataBaseCursorHolder cursor = DataBaseUtils.filterFromTable(connection, "Χρήστες", new String[]{"Όνομα Χρήστη"},
                new String[]{String.format("Όνομα Χρήστη = '%s'", UserName), "Και", String.format("Κωδικός Χρήστη = '%s'", UserPassword)});
        while (cursor.getResults().next()) {
            if (cursor.getResults().getString(1).equals(UserName)) {
                cursor.closeCursor();
                return true;
            } else {
                cursor.closeCursor();
                return false;
            }
        }
        return false;
    }

    private static boolean isUserAdmin(final String UserName, final String UserPassword, final Connection connection) throws SQLException {
        final DataBaseCursorHolder cursor = DataBaseUtils.filterFromTable(connection, "Χρήστες", new String[]{"Δικαιώματα"},
                new String[]{String.format("Όνομα Χρήστη = '%s'", UserName), "Και", String.format("Κωδικός Χρήστη = '%s'", UserPassword)});
        cursor.getResults().next();
        if (cursor.getResults().getBoolean(1)) {
            cursor.closeCursor();
            return true;
        } else {
            cursor.closeCursor();
            return false;
        }
    }

}